# -*- coding: utf-8 -*-
"""OOP & Procedural Programming.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19FPo7pYXs0a9biKUqMTcBLpSp__zMlyC

# Object Oriented Approach
"""

import json
import math

def preprocess_data(data):
    if "Planets" in data:
        for planet in data["Planets"]:
            planet["name"] = planet.pop("Name", None)
            planet["diameter"] = planet.pop("Diameter", None)
            planet["circumference"] = planet.pop("Circumference", None)
            planet["distance_from_sun"] = planet.pop("DistanceFromSun", None)
            planet["orbital_period"] = planet.pop("OrbitalPeriod", None)

            # Extract moons
            moons = planet.pop("Moons", [])
            for moon in moons:
                moon["name"] = moon.pop("Name", None)
                moon["diameter"] = moon.pop("Diameter", None)
                moon["circumference"] = moon.pop("Circumference", None)
            planet["moons"] = moons

    return data




class CelestialBody:
    def __init__(self, name, diameter=None, circumference=None):
        self.name = name
        self.diameter = diameter if diameter else self.calculate_diameter(circumference)
        self.circumference = circumference if circumference else self.calculate_circumference(diameter)

    def calculate_circumference(self, diameter):
        return math.pi * diameter if diameter else None

    def calculate_diameter(self, circumference):
        return circumference / math.pi if circumference else None

    def calculate_volume(self):
        return (4/3) * math.pi * (self.diameter/2) ** 3 if self.diameter else 0

class Moon(CelestialBody):
    def __init__(self, name, diameter=None, circumference=None):
        super().__init__(name, diameter, circumference)

class Planet(CelestialBody):
    def __init__(self, name, diameter=None, circumference=None, distance_from_sun=None, orbital_period=None, moons=None):
        super().__init__(name, diameter, circumference)
        self.distance_from_sun = distance_from_sun if distance_from_sun else self.calculate_distance(orbital_period)
        self.orbital_period = orbital_period if orbital_period else self.calculate_orbital_period(distance_from_sun)
        self.moons = [Moon(**moon) for moon in moons] if moons else []

    def calculate_orbital_period(self, distance):
        return round((distance ** 3) ** 0.5, 2) if distance else None

    def calculate_distance(self, orbital_period):
        return round((orbital_period ** 2) ** (1/3), 2) if orbital_period else None


class Sun(CelestialBody):
    def __init__(self, name, diameter, planets):
        super().__init__(name, diameter)
        self.planets = [Planet(**planet) for planet in planets]

    def total_planet_volume(self):
        return sum(planet.calculate_volume() for planet in self.planets)

    def can_planets_fit(self):
        return self.total_planet_volume() < self.calculate_volume()

    def display_info(self):
        print(f"Sun: {self.name}")
        print(f"Diameter: {self.diameter} km")
        print(f"Circumference: {self.circumference:.2f} km\n")

        for planet in self.planets:
            print(f"Planet: {planet.name}")
            print(f"Distance from Sun: {planet.distance_from_sun} au")
            print(f"Orbital Period: {planet.orbital_period} years")
            print(f"Diameter: {planet.diameter:.2f} km")
            print(f"Circumference: {planet.circumference:.2f} km\n")

            for moon in planet.moons:
                print(f"Moon: {moon.name}")
                print(f"Diameter: {moon.diameter:.2f} km")
                print(f"Circumference: {moon.circumference:.2f} km\n")

        print(f"All planets' volumes added together could fit in the Sun: {self.can_planets_fit()}\n")

# Read JSON data
def read_data(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

if __name__ == "__main__":
    file_path = input("Enter the JSON file path: ")
    data = read_data(file_path)
    data = preprocess_data(data)
    sun = Sun(data["Name"], data["Diameter"], data.get("Planets", []))
    sun.display_info()

"""# Procedural Approach"""

import json
import math

def read_data(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

def calculate_circumference(diameter):
    return math.pi * diameter if diameter else None

def calculate_diameter(circumference):
    return circumference / math.pi if circumference else None

def calculate_orbital_period(distance):
    return round((distance ** 3) ** 0.5, 2) if distance else None

def calculate_distance(orbital_period):
    return round((orbital_period ** 2) ** (1/3), 2) if orbital_period else None

def calculate_volume(diameter):
    return (4/3) * math.pi * (diameter/2) ** 3 if diameter else 0

def process_solar_system(data):
    sun = data.get("Name", "Unknown Sun")
    sun_diameter = data.get("Diameter", 0)
    sun_volume = calculate_volume(sun_diameter)
    planets_volume = 0

    print(f"Sun: {sun}")
    print(f"Diameter: {sun_diameter} km")
    print(f"Circumference: {calculate_circumference(sun_diameter):.2f} km\n")

    for planet in data.get("Planets", []):
        name = planet.get("Name", "Unknown Planet")
        distance = planet.get("DistanceFromSun", calculate_distance(planet.get("OrbitalPeriod")))
        orbital_period = planet.get("OrbitalPeriod", calculate_orbital_period(distance))
        diameter = planet.get("Diameter", calculate_diameter(planet.get("Circumference")))
        circumference = planet.get("Circumference", calculate_circumference(diameter))
        planet_volume = calculate_volume(diameter)
        planets_volume += planet_volume

        print(f"Planet: {name}")
        print(f"Distance from Sun: {distance} au")
        print(f"Orbital Period: {orbital_period} years")
        print(f"Diameter: {diameter:.2f} km")
        print(f"Circumference: {circumference:.2f} km\n")

        for moon in planet.get("Moons", []):
            moon_name = moon.get("Name", "Unknown Moon")
            moon_diameter = moon.get("Diameter", calculate_diameter(moon.get("Circumference")))
            moon_circumference = moon.get("Circumference", calculate_circumference(moon_diameter))
            print(f"Moon: {moon_name}")
            print(f"Diameter: {moon_diameter:.2f} km")
            print(f"Circumference: {moon_circumference:.2f} km\n")

    print(f"All planets' volumes added together could fit in the Sun: {planets_volume < sun_volume}\n")

if __name__ == "__main__":
    file_path = input("Enter the JSON file path: ")
    data = read_data(file_path)
    process_solar_system(data)